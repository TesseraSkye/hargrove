
HGKnob.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000066c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000042c  20000000  0000066c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  2000042c  00000a98  0002042c  2**2
                  ALLOC
  3 .stack        00000404  2000046c  00000ad8  0002042c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002042c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020454  2**0
                  CONTENTS, READONLY
  6 .debug_info   00006704  00000000  00000000  000204ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004eb  00000000  00000000  00026bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000002a2  00000000  00000000  0002709c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000070  00000000  00000000  0002733e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000070  00000000  00000000  000273ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000db4c  00000000  00000000  0002741e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00000e0a  00000000  00000000  00034f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005a2fe  00000000  00000000  00035d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000029c  00000000  00000000  00090074  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	70 08 00 20 f1 00 00 00 ed 00 00 00 ed 00 00 00     p.. ............
	...
  2c:	ed 00 00 00 00 00 00 00 00 00 00 00 ed 00 00 00     ................
  3c:	ed 00 00 00 ed 00 00 00 ed 00 00 00 ed 00 00 00     ................
  4c:	ed 00 00 00 ed 00 00 00 ed 00 00 00 ed 00 00 00     ................
  5c:	ed 00 00 00 ed 00 00 00 ed 00 00 00 ed 00 00 00     ................
  6c:	00 00 00 00 ed 00 00 00 ed 00 00 00 ed 00 00 00     ................
  7c:	ed 00 00 00 ed 00 00 00 ed 00 00 00 ed 00 00 00     ................

0000008c <__do_global_dtors_aux>:
  8c:	b510      	push	{r4, lr}
  8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
  90:	7823      	ldrb	r3, [r4, #0]
  92:	2b00      	cmp	r3, #0
  94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
  96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
  98:	2b00      	cmp	r3, #0
  9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
  9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
  9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
  a0:	bf00      	nop
  a2:	2301      	movs	r3, #1
  a4:	7023      	strb	r3, [r4, #0]
  a6:	bd10      	pop	{r4, pc}
  a8:	2000042c 	.word	0x2000042c
  ac:	00000000 	.word	0x00000000
  b0:	0000066c 	.word	0x0000066c

000000b4 <frame_dummy>:
  b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
  b6:	b510      	push	{r4, lr}
  b8:	2b00      	cmp	r3, #0
  ba:	d003      	beq.n	c4 <frame_dummy+0x10>
  bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
  be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
  c0:	e000      	b.n	c4 <frame_dummy+0x10>
  c2:	bf00      	nop
  c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
  c6:	6803      	ldr	r3, [r0, #0]
  c8:	2b00      	cmp	r3, #0
  ca:	d100      	bne.n	ce <frame_dummy+0x1a>
  cc:	bd10      	pop	{r4, pc}
  ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
  d0:	2b00      	cmp	r3, #0
  d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
  d4:	4798      	blx	r3
  d6:	e7f9      	b.n	cc <frame_dummy+0x18>
  d8:	00000000 	.word	0x00000000
  dc:	20000430 	.word	0x20000430
  e0:	0000066c 	.word	0x0000066c
  e4:	0000066c 	.word	0x0000066c
  e8:	00000000 	.word	0x00000000

000000ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  ec:	e7fe      	b.n	ec <Dummy_Handler>
	...

000000f0 <Reset_Handler>:
{
  f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
  f2:	4a2a      	ldr	r2, [pc, #168]	; (19c <Reset_Handler+0xac>)
  f4:	4b2a      	ldr	r3, [pc, #168]	; (1a0 <Reset_Handler+0xb0>)
  f6:	429a      	cmp	r2, r3
  f8:	d011      	beq.n	11e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  fa:	001a      	movs	r2, r3
  fc:	4b29      	ldr	r3, [pc, #164]	; (1a4 <Reset_Handler+0xb4>)
  fe:	429a      	cmp	r2, r3
 100:	d20d      	bcs.n	11e <Reset_Handler+0x2e>
 102:	4a29      	ldr	r2, [pc, #164]	; (1a8 <Reset_Handler+0xb8>)
 104:	3303      	adds	r3, #3
 106:	1a9b      	subs	r3, r3, r2
 108:	089b      	lsrs	r3, r3, #2
 10a:	3301      	adds	r3, #1
 10c:	009b      	lsls	r3, r3, #2
 10e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 110:	4823      	ldr	r0, [pc, #140]	; (1a0 <Reset_Handler+0xb0>)
 112:	4922      	ldr	r1, [pc, #136]	; (19c <Reset_Handler+0xac>)
 114:	588c      	ldr	r4, [r1, r2]
 116:	5084      	str	r4, [r0, r2]
 118:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 11a:	429a      	cmp	r2, r3
 11c:	d1fa      	bne.n	114 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 11e:	4a23      	ldr	r2, [pc, #140]	; (1ac <Reset_Handler+0xbc>)
 120:	4b23      	ldr	r3, [pc, #140]	; (1b0 <Reset_Handler+0xc0>)
 122:	429a      	cmp	r2, r3
 124:	d20a      	bcs.n	13c <Reset_Handler+0x4c>
 126:	43d3      	mvns	r3, r2
 128:	4921      	ldr	r1, [pc, #132]	; (1b0 <Reset_Handler+0xc0>)
 12a:	185b      	adds	r3, r3, r1
 12c:	2103      	movs	r1, #3
 12e:	438b      	bics	r3, r1
 130:	3304      	adds	r3, #4
 132:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 134:	2100      	movs	r1, #0
 136:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 138:	4293      	cmp	r3, r2
 13a:	d1fc      	bne.n	136 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 13c:	4a1d      	ldr	r2, [pc, #116]	; (1b4 <Reset_Handler+0xc4>)
 13e:	21ff      	movs	r1, #255	; 0xff
 140:	4b1d      	ldr	r3, [pc, #116]	; (1b8 <Reset_Handler+0xc8>)
 142:	438b      	bics	r3, r1
 144:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 146:	39fd      	subs	r1, #253	; 0xfd
 148:	2390      	movs	r3, #144	; 0x90
 14a:	005b      	lsls	r3, r3, #1
 14c:	4a1b      	ldr	r2, [pc, #108]	; (1bc <Reset_Handler+0xcc>)
 14e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 150:	4a1b      	ldr	r2, [pc, #108]	; (1c0 <Reset_Handler+0xd0>)
 152:	78d3      	ldrb	r3, [r2, #3]
 154:	2503      	movs	r5, #3
 156:	43ab      	bics	r3, r5
 158:	2402      	movs	r4, #2
 15a:	4323      	orrs	r3, r4
 15c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 15e:	78d3      	ldrb	r3, [r2, #3]
 160:	270c      	movs	r7, #12
 162:	43bb      	bics	r3, r7
 164:	2608      	movs	r6, #8
 166:	4333      	orrs	r3, r6
 168:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
 16a:	4b16      	ldr	r3, [pc, #88]	; (1c4 <Reset_Handler+0xd4>)
 16c:	7b98      	ldrb	r0, [r3, #14]
 16e:	2230      	movs	r2, #48	; 0x30
 170:	4390      	bics	r0, r2
 172:	2220      	movs	r2, #32
 174:	4310      	orrs	r0, r2
 176:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 178:	7b99      	ldrb	r1, [r3, #14]
 17a:	43b9      	bics	r1, r7
 17c:	4331      	orrs	r1, r6
 17e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 180:	7b9a      	ldrb	r2, [r3, #14]
 182:	43aa      	bics	r2, r5
 184:	4322      	orrs	r2, r4
 186:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
 188:	4a0f      	ldr	r2, [pc, #60]	; (1c8 <Reset_Handler+0xd8>)
 18a:	6853      	ldr	r3, [r2, #4]
 18c:	2180      	movs	r1, #128	; 0x80
 18e:	430b      	orrs	r3, r1
 190:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 192:	4b0e      	ldr	r3, [pc, #56]	; (1cc <Reset_Handler+0xdc>)
 194:	4798      	blx	r3
        main();
 196:	4b0e      	ldr	r3, [pc, #56]	; (1d0 <Reset_Handler+0xe0>)
 198:	4798      	blx	r3
 19a:	e7fe      	b.n	19a <Reset_Handler+0xaa>
 19c:	0000066c 	.word	0x0000066c
 1a0:	20000000 	.word	0x20000000
 1a4:	2000042c 	.word	0x2000042c
 1a8:	20000004 	.word	0x20000004
 1ac:	2000042c 	.word	0x2000042c
 1b0:	2000046c 	.word	0x2000046c
 1b4:	e000ed00 	.word	0xe000ed00
 1b8:	00000000 	.word	0x00000000
 1bc:	41007000 	.word	0x41007000
 1c0:	41005000 	.word	0x41005000
 1c4:	41004800 	.word	0x41004800
 1c8:	41004000 	.word	0x41004000
 1cc:	000004a5 	.word	0x000004a5
 1d0:	00000455 	.word	0x00000455

000001d4 <setupADC>:
#define HG_CTRL_TOLERANCE 5								// tolerance for CTRL CHANGE


//setup

void setupADC(void) {
 1d4:	b510      	push	{r4, lr}
  
	/* Enable the APB clock for the ADC. */
	PM->APBCMASK.reg |= PM_APBCMASK_ADC;
 1d6:	4a2a      	ldr	r2, [pc, #168]	; (280 <setupADC+0xac>)
 1d8:	6a11      	ldr	r1, [r2, #32]
 1da:	2380      	movs	r3, #128	; 0x80
 1dc:	005b      	lsls	r3, r3, #1
 1de:	430b      	orrs	r3, r1
 1e0:	6213      	str	r3, [r2, #32]
  
	/* Enable GCLK0 (48Mhz) for the ADC */
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
 1e2:	4a28      	ldr	r2, [pc, #160]	; (284 <setupADC+0xb0>)
 1e4:	4b28      	ldr	r3, [pc, #160]	; (288 <setupADC+0xb4>)
 1e6:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0 |
                      GCLK_CLKCTRL_ID_ADC;
  
	/* Wait for bus synchronization. */
	while (GCLK->STATUS.bit.SYNCBUSY) {};
 1e8:	001a      	movs	r2, r3
 1ea:	7853      	ldrb	r3, [r2, #1]
 1ec:	09db      	lsrs	r3, r3, #7
 1ee:	d1fc      	bne.n	1ea <setupADC+0x16>

	/* Reset the ADC. */
	ADC->CTRLA.bit.ENABLE = 0;
 1f0:	4a26      	ldr	r2, [pc, #152]	; (28c <setupADC+0xb8>)
 1f2:	7813      	ldrb	r3, [r2, #0]
 1f4:	2102      	movs	r1, #2
 1f6:	438b      	bics	r3, r1
 1f8:	7013      	strb	r3, [r2, #0]
	while (ADC->STATUS.bit.SYNCBUSY) {};
 1fa:	7e53      	ldrb	r3, [r2, #25]
 1fc:	09db      	lsrs	r3, r3, #7
 1fe:	d1fc      	bne.n	1fa <setupADC+0x26>
	ADC->CTRLA.bit.SWRST = 1;
 200:	4a22      	ldr	r2, [pc, #136]	; (28c <setupADC+0xb8>)
 202:	7813      	ldrb	r3, [r2, #0]
 204:	2101      	movs	r1, #1
 206:	430b      	orrs	r3, r1
 208:	7013      	strb	r3, [r2, #0]
	while (ADC->CTRLA.bit.SWRST || ADC->STATUS.bit.SYNCBUSY) {};
 20a:	7813      	ldrb	r3, [r2, #0]
 20c:	07db      	lsls	r3, r3, #31
 20e:	d4fc      	bmi.n	20a <setupADC+0x36>
 210:	7e53      	ldrb	r3, [r2, #25]
 212:	09db      	lsrs	r3, r3, #7
 214:	d1f9      	bne.n	20a <setupADC+0x36>

  /* Load factory calibration. */
	uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
 216:	4b1e      	ldr	r3, [pc, #120]	; (290 <setupADC+0xbc>)
 218:	681a      	ldr	r2, [r3, #0]
 21a:	0691      	lsls	r1, r2, #26
 21c:	0f49      	lsrs	r1, r1, #29
	uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
 21e:	4b1d      	ldr	r3, [pc, #116]	; (294 <setupADC+0xc0>)
 220:	681c      	ldr	r4, [r3, #0]
 222:	0ee4      	lsrs	r4, r4, #27
	linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
 224:	0152      	lsls	r2, r2, #5
 226:	23ff      	movs	r3, #255	; 0xff
 228:	4013      	ands	r3, r2
 22a:	431c      	orrs	r4, r3
  
  /* Wait for bus synchronization. */
	while (ADC->STATUS.bit.SYNCBUSY) {};
 22c:	4a17      	ldr	r2, [pc, #92]	; (28c <setupADC+0xb8>)
 22e:	7e53      	ldrb	r3, [r2, #25]
 230:	09db      	lsrs	r3, r3, #7
 232:	d1fc      	bne.n	22e <setupADC+0x5a>
  
  /* Write the calibration data. */
	ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
 234:	020b      	lsls	r3, r1, #8
 236:	4323      	orrs	r3, r4
 238:	4a14      	ldr	r2, [pc, #80]	; (28c <setupADC+0xb8>)
 23a:	8513      	strh	r3, [r2, #40]	; 0x28
  
  /* Wait for bus synchronization. */
	while (ADC->STATUS.bit.SYNCBUSY) {};
 23c:	7e53      	ldrb	r3, [r2, #25]
 23e:	09db      	lsrs	r3, r3, #7
 240:	d1fc      	bne.n	23c <setupADC+0x68>
  
  /* Use the internal VCC reference. This is 1/2 of what's on VCCA.
     since VCCA is typically 3.3v, this is 1.65v.
  */
	ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
 242:	4b12      	ldr	r3, [pc, #72]	; (28c <setupADC+0xb8>)
 244:	2202      	movs	r2, #2
 246:	705a      	strb	r2, [r3, #1]
  

	ADC->AVGCTRL.reg = HG_ADC_NUM_SAMPS | HG_ADC_ADJRES; //tweak later for N/R if it's an issue
 248:	3231      	adds	r2, #49	; 0x31
 24a:	709a      	strb	r2, [r3, #2]
  
	// prescale div and resolution
	ADC->CTRLB.reg = HG_ADC_PRESCALER_DIV |
 24c:	3a23      	subs	r2, #35	; 0x23
 24e:	809a      	strh	r2, [r3, #4]
     - MUXNEG_GND means that the ADC should compare the input value to GND.
  
     - MUXPOS_PIN2 means that the ADC should read from AIN2, or PB04.
       This is A2 on the Feather M0 board.
	*/
	ADC->INPUTCTRL.reg = 
 250:	4911      	ldr	r1, [pc, #68]	; (298 <setupADC+0xc4>)
 252:	6119      	str	r1, [r3, #16]
		ADC_INPUTCTRL_GAIN_DIV2 |
		ADC_INPUTCTRL_MUXNEG_GND |
		ADC_INPUTCTRL_MUXPOS_PIN2;
	  
	//set sample time to change input impedance
	ADC->SAMPCTRL.reg = ADC_SAMPCTRL_SAMPLEN(1);
 254:	2101      	movs	r1, #1
 256:	70d9      	strb	r1, [r3, #3]
  
	/* Set  __ as an input pin. */
	PORT->Group[0].DIRCLR.reg = PORT_PA04;
 258:	4b10      	ldr	r3, [pc, #64]	; (29c <setupADC+0xc8>)
 25a:	605a      	str	r2, [r3, #4]
  
	/* Enable the peripheral multiplexer for PB04. */
	PORT->Group[0].PINCFG[4].reg |= PORT_PINCFG_PMUXEN;
 25c:	2044      	movs	r0, #68	; 0x44
 25e:	5c1a      	ldrb	r2, [r3, r0]
 260:	2401      	movs	r4, #1
 262:	4322      	orrs	r2, r4
 264:	541a      	strb	r2, [r3, r0]
  
	/* Set PB04 to function B which is analog input. */
	PORT->Group[0].PMUX[4 >> 1].reg = PORT_PMUX_PMUXE_B;
 266:	2232      	movs	r2, #50	; 0x32
 268:	5499      	strb	r1, [r3, r2]

  
	/* Wait for bus synchronization. */
	while (ADC->STATUS.bit.SYNCBUSY) {};
 26a:	4a08      	ldr	r2, [pc, #32]	; (28c <setupADC+0xb8>)
 26c:	7e53      	ldrb	r3, [r2, #25]
 26e:	09db      	lsrs	r3, r3, #7
 270:	d1fc      	bne.n	26c <setupADC+0x98>
  
	/* Enable the ADC. */
	ADC->CTRLA.bit.ENABLE = 1;
 272:	4a06      	ldr	r2, [pc, #24]	; (28c <setupADC+0xb8>)
 274:	7813      	ldrb	r3, [r2, #0]
 276:	2102      	movs	r1, #2
 278:	430b      	orrs	r3, r1
 27a:	7013      	strb	r3, [r2, #0]
};
 27c:	bd10      	pop	{r4, pc}
 27e:	46c0      	nop			; (mov r8, r8)
 280:	40000400 	.word	0x40000400
 284:	00004013 	.word	0x00004013
 288:	40000c00 	.word	0x40000c00
 28c:	42002000 	.word	0x42002000
 290:	00806024 	.word	0x00806024
 294:	00806020 	.word	0x00806020
 298:	0f001802 	.word	0x0f001802
 29c:	41004400 	.word	0x41004400

000002a0 <setupI2C>:

void setupI2C(void) {


    // enable sercom peripheral bus mask
    PM->APBCMASK.reg |= HG_SERCOM_APBCMASK;
 2a0:	4a32      	ldr	r2, [pc, #200]	; (36c <setupI2C+0xcc>)
 2a2:	6a13      	ldr	r3, [r2, #32]
 2a4:	2104      	movs	r1, #4
 2a6:	430b      	orrs	r3, r1
 2a8:	6213      	str	r3, [r2, #32]

    //turn on gclk for sercom
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | HG_I2C_GCLK | HG_I2C_GCLK_CLKCTRL_ID;
 2aa:	4a31      	ldr	r2, [pc, #196]	; (370 <setupI2C+0xd0>)
 2ac:	4b31      	ldr	r3, [pc, #196]	; (374 <setupI2C+0xd4>)
 2ae:	805a      	strh	r2, [r3, #2]

    //wait for gclk sync
    while (GCLK->STATUS.bit.SYNCBUSY) {};
 2b0:	001a      	movs	r2, r3
 2b2:	7853      	ldrb	r3, [r2, #1]
 2b4:	09db      	lsrs	r3, r3, #7
 2b6:	d1fc      	bne.n	2b2 <setupI2C+0x12>

    //reset sercom
    HG_SERCOM->I2CM.CTRLA.bit.ENABLE = 0;
 2b8:	4a2f      	ldr	r2, [pc, #188]	; (378 <setupI2C+0xd8>)
 2ba:	6813      	ldr	r3, [r2, #0]
 2bc:	2102      	movs	r1, #2
 2be:	438b      	bics	r3, r1
 2c0:	6013      	str	r3, [r2, #0]
    while (HG_SERCOM->I2CM.SYNCBUSY.bit.ENABLE) {};
 2c2:	69d3      	ldr	r3, [r2, #28]
 2c4:	079b      	lsls	r3, r3, #30
 2c6:	d4fc      	bmi.n	2c2 <setupI2C+0x22>
    HG_SERCOM->I2CM.CTRLA.bit.SWRST = 1;
 2c8:	4a2b      	ldr	r2, [pc, #172]	; (378 <setupI2C+0xd8>)
 2ca:	6813      	ldr	r3, [r2, #0]
 2cc:	2101      	movs	r1, #1
 2ce:	430b      	orrs	r3, r1
 2d0:	6013      	str	r3, [r2, #0]
    while (HG_SERCOM->I2CM.SYNCBUSY.bit.SWRST || HG_SERCOM->I2CM.SYNCBUSY.bit.ENABLE) {};
 2d2:	69d3      	ldr	r3, [r2, #28]
 2d4:	07db      	lsls	r3, r3, #31
 2d6:	d4fc      	bmi.n	2d2 <setupI2C+0x32>
 2d8:	69d3      	ldr	r3, [r2, #28]
 2da:	079b      	lsls	r3, r3, #30
 2dc:	d4f9      	bmi.n	2d2 <setupI2C+0x32>

	//setup pin mux for i2c lines
	PORT->Group[0].PINCFG[14].reg |= PORT_PINCFG_PMUXEN;
 2de:	4b27      	ldr	r3, [pc, #156]	; (37c <setupI2C+0xdc>)
 2e0:	224e      	movs	r2, #78	; 0x4e
 2e2:	5c99      	ldrb	r1, [r3, r2]
 2e4:	2001      	movs	r0, #1
 2e6:	4301      	orrs	r1, r0
 2e8:	b2c9      	uxtb	r1, r1
 2ea:	5499      	strb	r1, [r3, r2]
	PORT->Group[0].PINCFG[15].reg |= PORT_PINCFG_PMUXEN;
 2ec:	214f      	movs	r1, #79	; 0x4f
 2ee:	5c5a      	ldrb	r2, [r3, r1]
 2f0:	4302      	orrs	r2, r0
 2f2:	b2d2      	uxtb	r2, r2
 2f4:	545a      	strb	r2, [r3, r1]
			

	// set the mode for the I2C Pins
	PORT->Group[0].PMUX[14 >> 1].reg |= PORT_PMUX_PMUXE_C;
 2f6:	2237      	movs	r2, #55	; 0x37
 2f8:	5c99      	ldrb	r1, [r3, r2]
 2fa:	2002      	movs	r0, #2
 2fc:	4301      	orrs	r1, r0
 2fe:	5499      	strb	r1, [r3, r2]
	PORT->Group[0].PMUX[15 >> 1].reg |= PORT_PMUX_PMUXO_C;
 300:	5c99      	ldrb	r1, [r3, r2]
 302:	301e      	adds	r0, #30
 304:	4301      	orrs	r1, r0
 306:	5499      	strb	r1, [r3, r2]


    //setup sercom - i2c stuff
    HG_SERCOM->I2CM.CTRLA.bit.SWRST = 1;
 308:	4a1b      	ldr	r2, [pc, #108]	; (378 <setupI2C+0xd8>)
 30a:	6813      	ldr	r3, [r2, #0]
 30c:	2101      	movs	r1, #1
 30e:	430b      	orrs	r3, r1
 310:	6013      	str	r3, [r2, #0]
    while (HG_SERCOM->I2CM.SYNCBUSY.bit.SWRST || HG_SERCOM->I2CM.CTRLA.bit.SWRST) {};
 312:	69d3      	ldr	r3, [r2, #28]
 314:	07db      	lsls	r3, r3, #31
 316:	d4fc      	bmi.n	312 <setupI2C+0x72>
 318:	6813      	ldr	r3, [r2, #0]
 31a:	07db      	lsls	r3, r3, #31
 31c:	d4f9      	bmi.n	312 <setupI2C+0x72>

    HG_SERCOM->I2CM.CTRLA.reg = SERCOM_I2CM_CTRLA_SPEED(0) |        // 0 is standard/fast mode 100 & 400kHz
 31e:	4b16      	ldr	r3, [pc, #88]	; (378 <setupI2C+0xd8>)
 320:	2214      	movs	r2, #20
 322:	601a      	str	r2, [r3, #0]
                                     SERCOM_I2CM_CTRLA_SDAHOLD(0) |      // Hold SDA low for 300-600ns
                                     SERCOM_I2CM_CTRLA_MODE_I2C_MASTER;  // work as master

    //smart mode for autohandling of (n)ack and stuff
    HG_SERCOM->I2CM.CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN | SERCOM_I2CM_CTRLB_QCEN;
 324:	22c0      	movs	r2, #192	; 0xc0
 326:	0092      	lsls	r2, r2, #2
 328:	605a      	str	r2, [r3, #4]
    while (HG_SERCOM->I2CM.SYNCBUSY.bit.SYSOP) {};
 32a:	001a      	movs	r2, r3
 32c:	69d3      	ldr	r3, [r2, #28]
 32e:	075b      	lsls	r3, r3, #29
 330:	d4fc      	bmi.n	32c <setupI2C+0x8c>

    //set the baudrate with some clean code thx to arduino
    uint32_t baudrate = HG_I2C_BAUD;      // Hz
    uint32_t clock_speed = HG_I2C_GCLK_FREQ;  // Hz
    uint32_t rise_time = HG_I2C_RISE_TIME;    // ns
    HG_SERCOM->I2CM.BAUD.bit.BAUD =
 332:	4a11      	ldr	r2, [pc, #68]	; (378 <setupI2C+0xd8>)
 334:	68d3      	ldr	r3, [r2, #12]
 336:	21ff      	movs	r1, #255	; 0xff
 338:	438b      	bics	r3, r1
 33a:	39fb      	subs	r1, #251	; 0xfb
 33c:	430b      	orrs	r3, r1
 33e:	60d3      	str	r3, [r2, #12]
        clock_speed / (2 * baudrate) - 5 - (((clock_speed / 1000000) * rise_time) / (2 * 1000));
    while (HG_SERCOM->I2CM.SYNCBUSY.bit.SYSOP) {};
 340:	69d3      	ldr	r3, [r2, #28]
 342:	075b      	lsls	r3, r3, #29
 344:	d4fc      	bmi.n	340 <setupI2C+0xa0>

    //enable sercom
    HG_SERCOM->I2CM.CTRLA.bit.ENABLE = 1;
 346:	4a0c      	ldr	r2, [pc, #48]	; (378 <setupI2C+0xd8>)
 348:	6813      	ldr	r3, [r2, #0]
 34a:	2102      	movs	r1, #2
 34c:	430b      	orrs	r3, r1
 34e:	6013      	str	r3, [r2, #0]
    while (HG_SERCOM->I2CM.SYNCBUSY.bit.ENABLE) {};
 350:	69d3      	ldr	r3, [r2, #28]
 352:	079b      	lsls	r3, r3, #30
 354:	d4fc      	bmi.n	350 <setupI2C+0xb0>

    //set bus to idle
    HG_SERCOM->I2CM.STATUS.bit.BUSSTATE = BUSSTATE_IDLE;
 356:	4a08      	ldr	r2, [pc, #32]	; (378 <setupI2C+0xd8>)
 358:	8b53      	ldrh	r3, [r2, #26]
 35a:	2130      	movs	r1, #48	; 0x30
 35c:	438b      	bics	r3, r1
 35e:	2110      	movs	r1, #16
 360:	430b      	orrs	r3, r1
 362:	8353      	strh	r3, [r2, #26]
    while (HG_SERCOM->I2CM.SYNCBUSY.bit.SYSOP) {};
 364:	69d3      	ldr	r3, [r2, #28]
 366:	075b      	lsls	r3, r3, #29
 368:	d4fc      	bmi.n	364 <setupI2C+0xc4>
};
 36a:	4770      	bx	lr
 36c:	40000400 	.word	0x40000400
 370:	0000400e 	.word	0x0000400e
 374:	40000c00 	.word	0x40000c00
 378:	42000800 	.word	0x42000800
 37c:	41004400 	.word	0x41004400

00000380 <hg_i2c_write>:

//conv funcs

//create func for writing with i2c
enum hg_i2c_res hg_i2c_write(uint8_t address, uint8_t* data, size_t len) {
 380:	b530      	push	{r4, r5, lr}
    /* Before trying to write, check to see if the bus is busy, if it is,
       bail.
    */
    if (HG_SERCOM->I2CM.STATUS.bit.BUSSTATE == BUSSTATE_BUSY) {
 382:	4b24      	ldr	r3, [pc, #144]	; (414 <STACK_SIZE+0x14>)
 384:	8b5b      	ldrh	r3, [r3, #26]
 386:	069b      	lsls	r3, r3, #26
 388:	0f9b      	lsrs	r3, r3, #30
 38a:	2b03      	cmp	r3, #3
 38c:	d036      	beq.n	3fc <hg_i2c_write+0x7c>
        return false;
    }

    /* Address + write flag. */
    HG_SERCOM->I2CM.ADDR.bit.ADDR = (address << 0x1ul) | 0;
 38e:	4d21      	ldr	r5, [pc, #132]	; (414 <STACK_SIZE+0x14>)
 390:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 392:	0044      	lsls	r4, r0, #1
 394:	0ad8      	lsrs	r0, r3, #11
 396:	02c0      	lsls	r0, r0, #11
 398:	4320      	orrs	r0, r4
 39a:	6268      	str	r0, [r5, #36]	; 0x24
    /* TODO: Consider a timeout here. */
    while (!HG_SERCOM->I2CM.INTFLAG.bit.MB) {};
 39c:	0028      	movs	r0, r5
 39e:	7e03      	ldrb	r3, [r0, #24]
 3a0:	07db      	lsls	r3, r3, #31
 3a2:	d5fc      	bpl.n	39e <hg_i2c_write+0x1e>

    /* Check for loss of bus or NACK - in either case we can't continue. */
    if (HG_SERCOM->I2CM.STATUS.bit.BUSSTATE != BUSSTATE_OWNER) {
 3a4:	4b1b      	ldr	r3, [pc, #108]	; (414 <STACK_SIZE+0x14>)
 3a6:	8b5b      	ldrh	r3, [r3, #26]
 3a8:	069b      	lsls	r3, r3, #26
 3aa:	0f9b      	lsrs	r3, r3, #30
 3ac:	2b02      	cmp	r3, #2
 3ae:	d127      	bne.n	400 <STACK_SIZE>
        return HG_I2C_RES_ERR_BUSSTATE;
    }
    if (HG_SERCOM->I2CM.STATUS.bit.RXNACK) {
 3b0:	4b18      	ldr	r3, [pc, #96]	; (414 <STACK_SIZE+0x14>)
 3b2:	8b5b      	ldrh	r3, [r3, #26]
 3b4:	075b      	lsls	r3, r3, #29
 3b6:	d426      	bmi.n	406 <STACK_SIZE+0x6>
        return HG_I2C_RES_ERR_ADDR_NACK;
    }

    /* Send data bytes. */
    for (size_t i = 0; i < len; i++) {
 3b8:	2a00      	cmp	r2, #0
 3ba:	d014      	beq.n	3e6 <hg_i2c_write+0x66>
 3bc:	000c      	movs	r4, r1
 3be:	1889      	adds	r1, r1, r2
        /* Send data and wait for TX complete. */
        HG_SERCOM->I2CM.DATA.bit.DATA = data[i];
 3c0:	4b14      	ldr	r3, [pc, #80]	; (414 <STACK_SIZE+0x14>)
 3c2:	2528      	movs	r5, #40	; 0x28
 3c4:	7822      	ldrb	r2, [r4, #0]
 3c6:	555a      	strb	r2, [r3, r5]

        while (!HG_SERCOM->I2CM.INTFLAG.bit.MB) {
 3c8:	7e18      	ldrb	r0, [r3, #24]
 3ca:	07c2      	lsls	r2, r0, #31
 3cc:	d405      	bmi.n	3da <hg_i2c_write+0x5a>
            /* Check for loss of arbitration or a bus error. We can't continue if those happen. */
            /* BUSERR is set in addition to ARBLOST if arbitration is lost, so just check that one. */
            if (HG_SERCOM->I2CM.STATUS.bit.BUSERR) {
 3ce:	8b58      	ldrh	r0, [r3, #26]
 3d0:	07c2      	lsls	r2, r0, #31
 3d2:	d5f9      	bpl.n	3c8 <hg_i2c_write+0x48>
                return HG_I2C_RES_ERR_BUSERR;
 3d4:	2003      	movs	r0, #3
 3d6:	4240      	negs	r0, r0
    /* Send STOP command. */
    HG_SERCOM->I2CM.CTRLB.bit.CMD = 3;
    while (HG_SERCOM->I2CM.SYNCBUSY.bit.SYSOP) {};

    return HG_I2C_RES_SUCCESS;
};
 3d8:	bd30      	pop	{r4, r5, pc}
        if (HG_SERCOM->I2CM.STATUS.bit.RXNACK) {
 3da:	8b5a      	ldrh	r2, [r3, #26]
 3dc:	0752      	lsls	r2, r2, #29
 3de:	d415      	bmi.n	40c <STACK_SIZE+0xc>
 3e0:	3401      	adds	r4, #1
    for (size_t i = 0; i < len; i++) {
 3e2:	42a1      	cmp	r1, r4
 3e4:	d1ee      	bne.n	3c4 <hg_i2c_write+0x44>
    HG_SERCOM->I2CM.CTRLB.bit.CMD = 3;
 3e6:	4a0b      	ldr	r2, [pc, #44]	; (414 <STACK_SIZE+0x14>)
 3e8:	6851      	ldr	r1, [r2, #4]
 3ea:	23c0      	movs	r3, #192	; 0xc0
 3ec:	029b      	lsls	r3, r3, #10
 3ee:	430b      	orrs	r3, r1
 3f0:	6053      	str	r3, [r2, #4]
    while (HG_SERCOM->I2CM.SYNCBUSY.bit.SYSOP) {};
 3f2:	69d3      	ldr	r3, [r2, #28]
 3f4:	075b      	lsls	r3, r3, #29
 3f6:	d4fc      	bmi.n	3f2 <hg_i2c_write+0x72>
    return HG_I2C_RES_SUCCESS;
 3f8:	2000      	movs	r0, #0
 3fa:	e7ed      	b.n	3d8 <hg_i2c_write+0x58>
        return false;
 3fc:	2000      	movs	r0, #0
 3fe:	e7eb      	b.n	3d8 <hg_i2c_write+0x58>
        return HG_I2C_RES_ERR_BUSSTATE;
 400:	2002      	movs	r0, #2
 402:	4240      	negs	r0, r0
 404:	e7e8      	b.n	3d8 <hg_i2c_write+0x58>
        return HG_I2C_RES_ERR_ADDR_NACK;
 406:	2001      	movs	r0, #1
 408:	4240      	negs	r0, r0
 40a:	e7e5      	b.n	3d8 <hg_i2c_write+0x58>
            return HG_I2C_RES_ERR_DATA_NACK;
 40c:	2004      	movs	r0, #4
 40e:	4240      	negs	r0, r0
 410:	e7e2      	b.n	3d8 <hg_i2c_write+0x58>
 412:	46c0      	nop			; (mov r8, r8)
 414:	42000800 	.word	0x42000800

00000418 <readADC>:

//func to read ADC
uint32_t readADC (void) {
	/* Wait for bus synchronization. */
	while (ADC->STATUS.bit.SYNCBUSY) {};
 418:	4a08      	ldr	r2, [pc, #32]	; (43c <readADC+0x24>)
 41a:	7e53      	ldrb	r3, [r2, #25]
 41c:	09db      	lsrs	r3, r3, #7
 41e:	d1fc      	bne.n	41a <readADC+0x2>
		
	/* Start the ADC using a software trigger. */
	ADC->SWTRIG.bit.START = 1;
 420:	4a06      	ldr	r2, [pc, #24]	; (43c <readADC+0x24>)
 422:	7b13      	ldrb	r3, [r2, #12]
 424:	2102      	movs	r1, #2
 426:	430b      	orrs	r3, r1
 428:	7313      	strb	r3, [r2, #12]
		
	/* Wait for the result ready flag to be set. */
	while (ADC->INTFLAG.bit.RESRDY == 0);
 42a:	7e13      	ldrb	r3, [r2, #24]
 42c:	07db      	lsls	r3, r3, #31
 42e:	d5fc      	bpl.n	42a <readADC+0x12>
		
	/* Clear the flag. */
	ADC->INTFLAG.reg = ADC_INTFLAG_RESRDY;
 430:	4b02      	ldr	r3, [pc, #8]	; (43c <readADC+0x24>)
 432:	2201      	movs	r2, #1
 434:	761a      	strb	r2, [r3, #24]
		
	/* Read the value. */
	return ADC->RESULT.reg;
 436:	8b58      	ldrh	r0, [r3, #26]
 438:	b280      	uxth	r0, r0
}
 43a:	4770      	bx	lr
 43c:	42002000 	.word	0x42002000

00000440 <setup>:

void setup() {
 440:	b510      	push	{r4, lr}
	setupADC();
 442:	4b02      	ldr	r3, [pc, #8]	; (44c <setup+0xc>)
 444:	4798      	blx	r3
	setupI2C();
 446:	4b02      	ldr	r3, [pc, #8]	; (450 <setup+0x10>)
 448:	4798      	blx	r3
};
 44a:	bd10      	pop	{r4, pc}
 44c:	000001d5 	.word	0x000001d5
 450:	000002a1 	.word	0x000002a1

00000454 <main>:

int main(void) {
 454:	b570      	push	{r4, r5, r6, lr}
 456:	b082      	sub	sp, #8
	setup();
 458:	4b0e      	ldr	r3, [pc, #56]	; (494 <main+0x40>)
 45a:	4798      	blx	r3
	
	while(1) {
		uint16_t res = readADC();
 45c:	4d0e      	ldr	r5, [pc, #56]	; (498 <main+0x44>)
 45e:	466b      	mov	r3, sp
 460:	1d9c      	adds	r4, r3, #6
		To make it better, implement a delay and timeout feature that checks for new readings infrequently, and only starts high-rate readings if there's new data.
		*/
		if (tol > HG_CTRL_TOLERANCE) {
			if(res > 4095) {res = 4095;};
			if (res <0) {res = 0;};
			hg_i2c_write(HG_I2C_SLAVE_ADDR, &res, 2); // target address, data, length in bytes of payload
 462:	4e0e      	ldr	r6, [pc, #56]	; (49c <main+0x48>)
 464:	e003      	b.n	46e <main+0x1a>
 466:	2202      	movs	r2, #2
 468:	0021      	movs	r1, r4
 46a:	2030      	movs	r0, #48	; 0x30
 46c:	47b0      	blx	r6
		uint16_t res = readADC();
 46e:	47a8      	blx	r5
 470:	8020      	strh	r0, [r4, #0]
		uint16_t temp = readADC();
 472:	47a8      	blx	r5
		int16_t tol = abs(res - temp); //signed so it actually works
 474:	8822      	ldrh	r2, [r4, #0]
 476:	0403      	lsls	r3, r0, #16
 478:	0c1b      	lsrs	r3, r3, #16
 47a:	1ad3      	subs	r3, r2, r3
 47c:	17d9      	asrs	r1, r3, #31
 47e:	185b      	adds	r3, r3, r1
 480:	404b      	eors	r3, r1
		if (tol > HG_CTRL_TOLERANCE) {
 482:	b21b      	sxth	r3, r3
 484:	2b05      	cmp	r3, #5
 486:	ddf2      	ble.n	46e <main+0x1a>
			if(res > 4095) {res = 4095;};
 488:	4b05      	ldr	r3, [pc, #20]	; (4a0 <main+0x4c>)
 48a:	429a      	cmp	r2, r3
 48c:	d9eb      	bls.n	466 <main+0x12>
 48e:	8023      	strh	r3, [r4, #0]
 490:	e7e9      	b.n	466 <main+0x12>
 492:	46c0      	nop			; (mov r8, r8)
 494:	00000441 	.word	0x00000441
 498:	00000419 	.word	0x00000419
 49c:	00000381 	.word	0x00000381
 4a0:	00000fff 	.word	0x00000fff

000004a4 <__libc_init_array>:
 4a4:	b570      	push	{r4, r5, r6, lr}
 4a6:	4e0d      	ldr	r6, [pc, #52]	; (4dc <__libc_init_array+0x38>)
 4a8:	4d0d      	ldr	r5, [pc, #52]	; (4e0 <__libc_init_array+0x3c>)
 4aa:	2400      	movs	r4, #0
 4ac:	1bad      	subs	r5, r5, r6
 4ae:	10ad      	asrs	r5, r5, #2
 4b0:	d005      	beq.n	4be <__libc_init_array+0x1a>
 4b2:	00a3      	lsls	r3, r4, #2
 4b4:	58f3      	ldr	r3, [r6, r3]
 4b6:	3401      	adds	r4, #1
 4b8:	4798      	blx	r3
 4ba:	42a5      	cmp	r5, r4
 4bc:	d1f9      	bne.n	4b2 <__libc_init_array+0xe>
 4be:	f000 f8c3 	bl	648 <_init>
 4c2:	4e08      	ldr	r6, [pc, #32]	; (4e4 <__libc_init_array+0x40>)
 4c4:	4d08      	ldr	r5, [pc, #32]	; (4e8 <__libc_init_array+0x44>)
 4c6:	2400      	movs	r4, #0
 4c8:	1bad      	subs	r5, r5, r6
 4ca:	10ad      	asrs	r5, r5, #2
 4cc:	d005      	beq.n	4da <__libc_init_array+0x36>
 4ce:	00a3      	lsls	r3, r4, #2
 4d0:	58f3      	ldr	r3, [r6, r3]
 4d2:	3401      	adds	r4, #1
 4d4:	4798      	blx	r3
 4d6:	42a5      	cmp	r5, r4
 4d8:	d1f9      	bne.n	4ce <__libc_init_array+0x2a>
 4da:	bd70      	pop	{r4, r5, r6, pc}
 4dc:	00000654 	.word	0x00000654
 4e0:	00000654 	.word	0x00000654
 4e4:	00000654 	.word	0x00000654
 4e8:	0000065c 	.word	0x0000065c

000004ec <register_fini>:
 4ec:	4b03      	ldr	r3, [pc, #12]	; (4fc <register_fini+0x10>)
 4ee:	b510      	push	{r4, lr}
 4f0:	2b00      	cmp	r3, #0
 4f2:	d002      	beq.n	4fa <register_fini+0xe>
 4f4:	4802      	ldr	r0, [pc, #8]	; (500 <register_fini+0x14>)
 4f6:	f000 f805 	bl	504 <atexit>
 4fa:	bd10      	pop	{r4, pc}
 4fc:	00000000 	.word	0x00000000
 500:	00000515 	.word	0x00000515

00000504 <atexit>:
 504:	b510      	push	{r4, lr}
 506:	0001      	movs	r1, r0
 508:	2300      	movs	r3, #0
 50a:	2200      	movs	r2, #0
 50c:	2000      	movs	r0, #0
 50e:	f000 f81f 	bl	550 <__register_exitproc>
 512:	bd10      	pop	{r4, pc}

00000514 <__libc_fini_array>:
 514:	b570      	push	{r4, r5, r6, lr}
 516:	4b09      	ldr	r3, [pc, #36]	; (53c <__libc_fini_array+0x28>)
 518:	4c09      	ldr	r4, [pc, #36]	; (540 <__libc_fini_array+0x2c>)
 51a:	1ae4      	subs	r4, r4, r3
 51c:	10a4      	asrs	r4, r4, #2
 51e:	d009      	beq.n	534 <__libc_fini_array+0x20>
 520:	4a08      	ldr	r2, [pc, #32]	; (544 <__libc_fini_array+0x30>)
 522:	18a5      	adds	r5, r4, r2
 524:	00ad      	lsls	r5, r5, #2
 526:	18ed      	adds	r5, r5, r3
 528:	682b      	ldr	r3, [r5, #0]
 52a:	3c01      	subs	r4, #1
 52c:	4798      	blx	r3
 52e:	3d04      	subs	r5, #4
 530:	2c00      	cmp	r4, #0
 532:	d1f9      	bne.n	528 <__libc_fini_array+0x14>
 534:	f000 f892 	bl	65c <_fini>
 538:	bd70      	pop	{r4, r5, r6, pc}
 53a:	46c0      	nop			; (mov r8, r8)
 53c:	00000668 	.word	0x00000668
 540:	0000066c 	.word	0x0000066c
 544:	3fffffff 	.word	0x3fffffff

00000548 <__retarget_lock_acquire_recursive>:
 548:	4770      	bx	lr
 54a:	46c0      	nop			; (mov r8, r8)

0000054c <__retarget_lock_release_recursive>:
 54c:	4770      	bx	lr
 54e:	46c0      	nop			; (mov r8, r8)

00000550 <__register_exitproc>:
 550:	b5f0      	push	{r4, r5, r6, r7, lr}
 552:	464e      	mov	r6, r9
 554:	4645      	mov	r5, r8
 556:	46de      	mov	lr, fp
 558:	4657      	mov	r7, sl
 55a:	b5e0      	push	{r5, r6, r7, lr}
 55c:	4d36      	ldr	r5, [pc, #216]	; (638 <__register_exitproc+0xe8>)
 55e:	b083      	sub	sp, #12
 560:	0006      	movs	r6, r0
 562:	6828      	ldr	r0, [r5, #0]
 564:	4698      	mov	r8, r3
 566:	000f      	movs	r7, r1
 568:	4691      	mov	r9, r2
 56a:	f7ff ffed 	bl	548 <__retarget_lock_acquire_recursive>
 56e:	4b33      	ldr	r3, [pc, #204]	; (63c <__register_exitproc+0xec>)
 570:	681c      	ldr	r4, [r3, #0]
 572:	23a4      	movs	r3, #164	; 0xa4
 574:	005b      	lsls	r3, r3, #1
 576:	58e0      	ldr	r0, [r4, r3]
 578:	2800      	cmp	r0, #0
 57a:	d052      	beq.n	622 <__register_exitproc+0xd2>
 57c:	6843      	ldr	r3, [r0, #4]
 57e:	2b1f      	cmp	r3, #31
 580:	dc13      	bgt.n	5aa <__register_exitproc+0x5a>
 582:	1c5a      	adds	r2, r3, #1
 584:	9201      	str	r2, [sp, #4]
 586:	2e00      	cmp	r6, #0
 588:	d128      	bne.n	5dc <__register_exitproc+0x8c>
 58a:	9a01      	ldr	r2, [sp, #4]
 58c:	3302      	adds	r3, #2
 58e:	009b      	lsls	r3, r3, #2
 590:	6042      	str	r2, [r0, #4]
 592:	501f      	str	r7, [r3, r0]
 594:	6828      	ldr	r0, [r5, #0]
 596:	f7ff ffd9 	bl	54c <__retarget_lock_release_recursive>
 59a:	2000      	movs	r0, #0
 59c:	b003      	add	sp, #12
 59e:	bc3c      	pop	{r2, r3, r4, r5}
 5a0:	4690      	mov	r8, r2
 5a2:	4699      	mov	r9, r3
 5a4:	46a2      	mov	sl, r4
 5a6:	46ab      	mov	fp, r5
 5a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 5aa:	4b25      	ldr	r3, [pc, #148]	; (640 <__register_exitproc+0xf0>)
 5ac:	2b00      	cmp	r3, #0
 5ae:	d03d      	beq.n	62c <__register_exitproc+0xdc>
 5b0:	20c8      	movs	r0, #200	; 0xc8
 5b2:	0040      	lsls	r0, r0, #1
 5b4:	e000      	b.n	5b8 <__register_exitproc+0x68>
 5b6:	bf00      	nop
 5b8:	2800      	cmp	r0, #0
 5ba:	d037      	beq.n	62c <__register_exitproc+0xdc>
 5bc:	22a4      	movs	r2, #164	; 0xa4
 5be:	2300      	movs	r3, #0
 5c0:	0052      	lsls	r2, r2, #1
 5c2:	58a1      	ldr	r1, [r4, r2]
 5c4:	6043      	str	r3, [r0, #4]
 5c6:	6001      	str	r1, [r0, #0]
 5c8:	50a0      	str	r0, [r4, r2]
 5ca:	3240      	adds	r2, #64	; 0x40
 5cc:	5083      	str	r3, [r0, r2]
 5ce:	3204      	adds	r2, #4
 5d0:	5083      	str	r3, [r0, r2]
 5d2:	3301      	adds	r3, #1
 5d4:	9301      	str	r3, [sp, #4]
 5d6:	2300      	movs	r3, #0
 5d8:	2e00      	cmp	r6, #0
 5da:	d0d6      	beq.n	58a <__register_exitproc+0x3a>
 5dc:	009a      	lsls	r2, r3, #2
 5de:	4692      	mov	sl, r2
 5e0:	4482      	add	sl, r0
 5e2:	464a      	mov	r2, r9
 5e4:	2188      	movs	r1, #136	; 0x88
 5e6:	4654      	mov	r4, sl
 5e8:	5062      	str	r2, [r4, r1]
 5ea:	22c4      	movs	r2, #196	; 0xc4
 5ec:	0052      	lsls	r2, r2, #1
 5ee:	4691      	mov	r9, r2
 5f0:	4481      	add	r9, r0
 5f2:	464a      	mov	r2, r9
 5f4:	3987      	subs	r1, #135	; 0x87
 5f6:	4099      	lsls	r1, r3
 5f8:	6812      	ldr	r2, [r2, #0]
 5fa:	468b      	mov	fp, r1
 5fc:	430a      	orrs	r2, r1
 5fe:	4694      	mov	ip, r2
 600:	464a      	mov	r2, r9
 602:	4661      	mov	r1, ip
 604:	6011      	str	r1, [r2, #0]
 606:	2284      	movs	r2, #132	; 0x84
 608:	4641      	mov	r1, r8
 60a:	0052      	lsls	r2, r2, #1
 60c:	50a1      	str	r1, [r4, r2]
 60e:	2e02      	cmp	r6, #2
 610:	d1bb      	bne.n	58a <__register_exitproc+0x3a>
 612:	0002      	movs	r2, r0
 614:	465c      	mov	r4, fp
 616:	328d      	adds	r2, #141	; 0x8d
 618:	32ff      	adds	r2, #255	; 0xff
 61a:	6811      	ldr	r1, [r2, #0]
 61c:	430c      	orrs	r4, r1
 61e:	6014      	str	r4, [r2, #0]
 620:	e7b3      	b.n	58a <__register_exitproc+0x3a>
 622:	0020      	movs	r0, r4
 624:	304d      	adds	r0, #77	; 0x4d
 626:	30ff      	adds	r0, #255	; 0xff
 628:	50e0      	str	r0, [r4, r3]
 62a:	e7a7      	b.n	57c <__register_exitproc+0x2c>
 62c:	6828      	ldr	r0, [r5, #0]
 62e:	f7ff ff8d 	bl	54c <__retarget_lock_release_recursive>
 632:	2001      	movs	r0, #1
 634:	4240      	negs	r0, r0
 636:	e7b1      	b.n	59c <__register_exitproc+0x4c>
 638:	20000428 	.word	0x20000428
 63c:	00000644 	.word	0x00000644
 640:	00000000 	.word	0x00000000

00000644 <_global_impure_ptr>:
 644:	20000000                                ... 

00000648 <_init>:
 648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 64a:	46c0      	nop			; (mov r8, r8)
 64c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 64e:	bc08      	pop	{r3}
 650:	469e      	mov	lr, r3
 652:	4770      	bx	lr

00000654 <__init_array_start>:
 654:	000004ed 	.word	0x000004ed

00000658 <__frame_dummy_init_array_entry>:
 658:	000000b5                                ....

0000065c <_fini>:
 65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 65e:	46c0      	nop			; (mov r8, r8)
 660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 662:	bc08      	pop	{r3}
 664:	469e      	mov	lr, r3
 666:	4770      	bx	lr

00000668 <__fini_array_start>:
 668:	0000008d 	.word	0x0000008d
